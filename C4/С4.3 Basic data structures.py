# ***** Основные структуры данных *****
# Структура данных — это программная единица,
# позволяющая хранить и обрабатывать множество логически связанных объектов.
# В этой части модуля мы начнем рассмотрение с основных и уже знакомых нам (под другими именами) структур данных:
#
#         массивы: статические и динамические;
#         хэш-таблицы.
#
# Каждую структуру данных в этом юните и в следующих мы будем рассматривать
# с точки зрения ее хранения в памяти, и, в зависимости от этого, как реализуются основные функции работы с ними:
#
#         доступ к элементу по индексу;
#         вставка элемента;
#         удаление элемента;
#         получение размера структуры.
#
# А также для каждой структуры, возможно, будут определяться специфичные для нее функции.

# *** Массивы ***
# Массив — это упорядоченный набор данных.
# Под упорядоченностью стоит понимать, что хранение этой структуры в памяти каким-то образом организовано.
# Массивы, для которых заранее резервируется фиксированная область памяти, называют статическими.
# В отличие от них существуют динамические массивы,
# которые с помощью буферного механизма, могут изменять свой размер.

# Важно различать:
#         логический размер массива (logical size) — фактическая заполненность массива;
#         зарезервированный размер памяти (capacity) — вместимость памяти для этого массива.

# Наиболее выгодное использование массивов возникает в тех ситуациях,
# когда происходит частое обращение к элементам массива по индексам,
# и в меньшей степени возникает необходимость добавлять и удалять элементы на произвольное место.

# Асимптотическая сложность некоторых операций массива:
# Получение размера 	O(1)
# Получение элемента массива по индексу 	O(1)
# Вставка элемента в конец / удаление с конца 	O(1)
# Вставка элемента на произвольное место / удаление элемента из произвольного места 	O(n)
# Расширение памяти при выходе за пределы массива 	O(n)

# *** Хэш-таблицы ***
# Словарный тип данных, с которым мы уже хорошо знакомы,
# реализует принцип структурирования данных, называющийся хэш-таблицы.
# Его суть заключается в том, что каждое значение обладает ключом доступа к нему.
# Тогда имеем, что все значения хранятся в обычном массиве (скрытом от нас),
# а в качестве индекса используется результат хэширования ключа.

# В данном случае под хэшированием понимается преобразование объекта,
# выступающего ключом, в целое число — индекс, используемый для доступа к значению.
# ключ должен быть уникальным, а также неизменяемым.
# Только обладая этими двумя условиями, хэш-

# Вставка пары 	                dict_[new_key] = value 	 O(1)
# Удаление пары 	            dict_.pop(key) 	         O(1)
# Получение значения по ключу 	dict_[key]               O(1)
# или                           dict_.get(key) 	         O(1)
# Получение размера 	        len(dict) 	             O(n)
