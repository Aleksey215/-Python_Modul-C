# ***** Полиморфизм в Python *****

# *** Как использовать полиморфизм при создании классов ***
# Полиморфизм в ООП обрабатывает разные типы данных, принадлежащих к разным классам,
# с помощью одной и той же функции (метода).
# По сути одинаковым является только имя метода, но результаты работы одноименных методов могут различаться.

# Дальше пример в файлах "rectangle_c1_9" и "rectangle_2"

# *** Еще немного о полиморфизме и магических методах на примере __eq__ и __str__ ***
# Давайте рассмотрим еще один полезный пример полиморфизма в классах Python — перегрузку операторов и методов.
# Перегрузка представляет собой изменение поведения стандартного оператора или метода под особенности класса.
# Возьмем несколько наиболее часто используемых методов:
#
#         __eq__ — определяет поведение оператора равенства ==;
#         __str__ — определяет поведение функции str() или вызов внутри функции print().
# А теперь рассмотрим примеры.
# Создадим файл points.py. Внутри файла определим класс Dot,
# который будет хранить в себе информацию о точках на плоскости в системе координат х, y:
# смотри файл points.py