# исключения — это тоже классы.
# Только поведение их особое:
# они могут наследоваться;
# ловить можно как сам класс, так и его родителя (при том в любом колене).
# В этом случае надо чтобы сначала обрабатывались более конкретные исключения,
# иначе они могут быть перекрыты их родителями и просто-напросто будут упущены.

# Принцип написания и отлова собственного исключения следующий:
# class MyException(Exception):  # создаём пустой класс – исключения
#     pass
#
#
# try:
#     raise MyException("message")  # поднимаем наше исключение
# except MyException as e:  # ловим его за хвост как шкодливого котёнка
#     print(e)  # выводим информацию об исключении

class ParentException(Exception):
    def __init__(self, message,
                 error):  # допишем к нашему пустому классу конструктор,
                          # который будет печатать дополнительно в консоль информацию об ошибке.
        super().__init__(message)  # помним про вызов конструктора родительского класса
        print(f"Errors: {error}")  # печатаем ошибку


class ChildException(ParentException):  # создаём пустой класс – исключение наследника, наследуемся от ParentException
    def __init__(self, message, error):
        super().__init__(message, error)


try:
    raise ChildException("message", "error")  # поднимаем исключение-наследник, передаём дополнительный аргумент
except ParentException as e:
    print(e)  # выводим информацию об исключении

# Итог:
#   Исключения — это такие особенные классы, которые как и любые классы можно наследовать.
#   Если вы хотите ловить несколько исключений, то сначала ловите потомков, а потом родителей,
#   чтобы ничего не упустить.
#
#    Чтобы создать собственный класс, нужно просто написать пустой класс и наследовать его от класса Exception,
#    этого будет достаточно.
#
#    Не обязательно отлавливать сам класс, при необходимости можно отлавливать его родителя,
#    это тоже будет работать, но вы можете упустить важную информацию.


class NonPositiveDigitException(ValueError):
    def __str__(self):
        return "Сторона квадрата меньше или равна 0"


class Square:
    def __init__(self, a):
        if a <= 0:
            raise NonPositiveDigitException
        else:
            self.a = a


square = Square(5)
print(square.a)
ng_square = Square(0)
print(ng_square.a)